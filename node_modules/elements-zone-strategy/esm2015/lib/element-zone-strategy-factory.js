import { createCustomElement } from '@angular/elements';
import { ElementZoneStrategy } from './element-zone-strategy';
export class ElementZoneStrategyFactory {
    constructor(component, injector) {
        this.component = component;
        this.injector = injector;
        this.ngElement = createCustomElement(this.component, { injector: this.injector });
        // this is to keep the document-register-element polyfill happy
        // it doesn't like creating elements before the define, so we fill the registry with a random definition
        customElements.define(this.generateName(), this.ngElement);
    }
    string4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    generateName() {
        let result = 'dummy-name-n';
        const temp = ElementZoneStrategyFactory.counter + '';
        result = result + temp + '-' + this.string4() + this.string4() + this.string4() + '-' +
            this.string4() + this.string4() + '-' + this.string4();
        ElementZoneStrategyFactory.counter++;
        return result;
    }
    create(injector) {
        // the only way to get a default strategy outside @angular/elements
        // is to create the ngElement/ngElementImpl and get it from a property
        let tempElement = new this.ngElement(this.injector);
        const strategy = tempElement['ngElementStrategy'];
        tempElement = null;
        return new ElementZoneStrategy(strategy, this.injector);
    }
}
ElementZoneStrategyFactory.counter = 1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC16b25lLXN0cmF0ZWd5LWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9lbGVtZW50cy16b25lLXN0cmF0ZWd5L3NyYy9saWIvZWxlbWVudC16b25lLXN0cmF0ZWd5LWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLG1CQUFtQixFQUErQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3JHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTlELE1BQU0sT0FBTywwQkFBMEI7SUFvQnJDLFlBQW9CLFNBQW9CLEVBQVUsUUFBa0I7UUFBaEQsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2xGLCtEQUErRDtRQUMvRCx3R0FBd0c7UUFDeEcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFyQlMsT0FBTztRQUNmLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFUyxZQUFZO1FBQ3BCLElBQUksTUFBTSxHQUFHLGNBQWMsQ0FBQztRQUU1QixNQUFNLElBQUksR0FBRywwQkFBMEIsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBRXJELE1BQU0sR0FBRyxNQUFNLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHO1lBQ25GLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV6RCwwQkFBMEIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBU0QsTUFBTSxDQUFDLFFBQWtCO1FBQ3ZCLG1FQUFtRTtRQUNuRSxzRUFBc0U7UUFDdEUsSUFBSSxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNsRCxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBRW5CLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFELENBQUM7O0FBbENNLGtDQUFPLEdBQUcsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNyZWF0ZUN1c3RvbUVsZW1lbnQsIE5nRWxlbWVudFN0cmF0ZWd5LCBOZ0VsZW1lbnRTdHJhdGVneUZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9lbGVtZW50cyc7XG5pbXBvcnQgeyBFbGVtZW50Wm9uZVN0cmF0ZWd5IH0gZnJvbSAnLi9lbGVtZW50LXpvbmUtc3RyYXRlZ3knO1xuXG5leHBvcnQgY2xhc3MgRWxlbWVudFpvbmVTdHJhdGVneUZhY3RvcnkgaW1wbGVtZW50cyBOZ0VsZW1lbnRTdHJhdGVneUZhY3Rvcnkge1xuICBzdGF0aWMgY291bnRlciA9IDE7XG4gIHByaXZhdGUgbmdFbGVtZW50O1xuXG4gIHByb3RlY3RlZCBzdHJpbmc0KCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdlbmVyYXRlTmFtZSgpIHtcbiAgICBsZXQgcmVzdWx0ID0gJ2R1bW15LW5hbWUtbic7XG5cbiAgICBjb25zdCB0ZW1wID0gRWxlbWVudFpvbmVTdHJhdGVneUZhY3RvcnkuY291bnRlciArICcnO1xuXG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgdGVtcCArICctJyArIHRoaXMuc3RyaW5nNCgpICsgdGhpcy5zdHJpbmc0KCkgKyB0aGlzLnN0cmluZzQoKSArICctJyArXG4gICAgICB0aGlzLnN0cmluZzQoKSArIHRoaXMuc3RyaW5nNCgpICsgJy0nICsgdGhpcy5zdHJpbmc0KCk7XG5cbiAgICBFbGVtZW50Wm9uZVN0cmF0ZWd5RmFjdG9yeS5jb3VudGVyKys7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50OiBUeXBlPGFueT4sIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy5uZ0VsZW1lbnQgPSBjcmVhdGVDdXN0b21FbGVtZW50KHRoaXMuY29tcG9uZW50LCB7IGluamVjdG9yOiB0aGlzLmluamVjdG9yIH0pO1xuICAgIC8vIHRoaXMgaXMgdG8ga2VlcCB0aGUgZG9jdW1lbnQtcmVnaXN0ZXItZWxlbWVudCBwb2x5ZmlsbCBoYXBweVxuICAgIC8vIGl0IGRvZXNuJ3QgbGlrZSBjcmVhdGluZyBlbGVtZW50cyBiZWZvcmUgdGhlIGRlZmluZSwgc28gd2UgZmlsbCB0aGUgcmVnaXN0cnkgd2l0aCBhIHJhbmRvbSBkZWZpbml0aW9uXG4gICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKHRoaXMuZ2VuZXJhdGVOYW1lKCksIHRoaXMubmdFbGVtZW50KTtcbiAgfVxuXG4gIGNyZWF0ZShpbmplY3RvcjogSW5qZWN0b3IpOiBOZ0VsZW1lbnRTdHJhdGVneSB7XG4gICAgLy8gdGhlIG9ubHkgd2F5IHRvIGdldCBhIGRlZmF1bHQgc3RyYXRlZ3kgb3V0c2lkZSBAYW5ndWxhci9lbGVtZW50c1xuICAgIC8vIGlzIHRvIGNyZWF0ZSB0aGUgbmdFbGVtZW50L25nRWxlbWVudEltcGwgYW5kIGdldCBpdCBmcm9tIGEgcHJvcGVydHlcbiAgICBsZXQgdGVtcEVsZW1lbnQgPSBuZXcgdGhpcy5uZ0VsZW1lbnQodGhpcy5pbmplY3Rvcik7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSB0ZW1wRWxlbWVudFsnbmdFbGVtZW50U3RyYXRlZ3knXTtcbiAgICB0ZW1wRWxlbWVudCA9IG51bGw7XG5cbiAgICByZXR1cm4gbmV3IEVsZW1lbnRab25lU3RyYXRlZ3koc3RyYXRlZ3ksIHRoaXMuaW5qZWN0b3IpO1xuICB9XG59XG4iXX0=
{"version":3,"sources":["../../../projects/elements-zone-strategy/src/lib/element-zone-strategy.ts","../../../projects/elements-zone-strategy/src/lib/element-zone-strategy-factory.ts"],"names":["ElementZoneStrategy","strategy","injector","this","ngZone","get","NgZone","events","prototype","connect","element","_this","runInZone","disconnect","getInputValue","propName","setInputValue","value","fn","run","ElementZoneStrategyFactory","component","ngElement","createCustomElement","customElements","define","generateName","string4","Math","floor","random","toString","substring","result","counter","create","tempElement"],"mappings":"sWAKA,IAAAA,EAAA,WAKI,SAAAA,EAAsBC,EAAuCC,GAAvCC,KAAAF,SAAAA,EAAuCE,KAAAD,SAAAA,EACzDC,KAAKC,OAASD,KAAKD,SAASG,IAAYC,EAAAA,QAEpCH,KAAKF,SAASM,SACdJ,KAAKI,OAASJ,KAAKF,SAASM,eAKpCP,EAAAQ,UAAAC,QAAA,SAAQC,GAAR,IAAAC,EAAAR,KACIA,KAAKS,WAAU,WAAQD,EAAKV,SAASQ,QAAQC,MAExCP,KAAKI,SACNJ,KAAKI,OAASJ,KAAKF,SAASM,SAIpCP,EAAAQ,UAAAK,WAAA,WAAA,IAAAF,EAAAR,KACIA,KAAKS,WAAU,WAAQD,EAAKV,SAASY,iBAEzCb,EAAAQ,UAAAM,cAAA,SAAcC,GAAd,IAAAJ,EAAAR,KAEI,OAAOA,KAAKS,WAAU,WAAQ,OAAOD,EAAKV,SAASa,cAAcC,OAErEf,EAAAQ,UAAAQ,cAAA,SAAcD,EAAkBE,GAAhC,IAAAN,EAAAR,KACIA,KAAKS,WAAU,WAAQD,EAAKV,SAASe,cAAcD,EAAUE,OAGzDjB,EAAAQ,UAAAI,UAAA,SAAUM,GAAiB,OAAOf,KAAKC,OAAOe,IAAID,MAjC9D,gBCmBE,SAAAE,EAAoBC,EAA8BnB,GAA9BC,KAAAkB,UAAAA,EAA8BlB,KAAAD,SAAAA,EAChDC,KAAKmB,UAAYC,EAAAA,oBAAoBpB,KAAKkB,UAAW,CAAEnB,SAAUC,KAAKD,WAGtEsB,eAAeC,OAAOtB,KAAKuB,eAAgBvB,KAAKmB,kBApBxCF,EAAAZ,UAAAmB,QAAA,WACR,OAAOC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqBC,SAAS,IAAIC,UAAU,IAGhEZ,EAAAZ,UAAAkB,aAAA,WACR,IAAIO,EAAS,eAQb,OAJAA,EAASA,GAFIb,EAA2Bc,QAAU,IAEzB,IAAM/B,KAAKwB,UAAYxB,KAAKwB,UAAYxB,KAAKwB,UAAY,IAChFxB,KAAKwB,UAAYxB,KAAKwB,UAAY,IAAMxB,KAAKwB,UAE/CP,EAA2Bc,UACpBD,GAUTb,EAAAZ,UAAA2B,OAAA,SAAOjC,GAGL,IAAIkC,EAAc,IAAIjC,KAAKmB,UAAUnB,KAAKD,UACpCD,EAAWmC,EAA+B,kBAGhD,OAFAA,EAAc,KAEP,IAAIpC,EAAoBC,EAAUE,KAAKD,gBAjCzCkB,EAAAc,QAAU","sourcesContent":["import { NgZone, Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NgElementStrategyEvent, NgElementStrategy } from '@angular/elements';\n\n\nexport class ElementZoneStrategy {\n    private ngZone: NgZone;\n\n    events: Observable<NgElementStrategyEvent>;\n\n    constructor(protected strategy: NgElementStrategy, protected injector: Injector) {\n        this.ngZone = this.injector.get<NgZone>(NgZone);\n\n        if (this.strategy.events) {\n            this.events = this.strategy.events;\n        }\n\n    }\n\n    connect(element: HTMLElement): void {\n        this.runInZone(() => { this.strategy.connect(element); });\n\n        if (!this.events) {\n            this.events = this.strategy.events;\n        }\n    }\n\n    disconnect(): void {\n        this.runInZone(() => { this.strategy.disconnect(); });\n    }\n    getInputValue(propName: string) {\n        // tslint:disable-next-line:arrow-return-shorthand\n        return this.runInZone(() => { return this.strategy.getInputValue(propName); });\n    }\n    setInputValue(propName: string, value: string): void {\n        this.runInZone(() => { this.strategy.setInputValue(propName, value); });\n    }\n\n    private runInZone(fn: () => any) { return this.ngZone.run(fn); }\n}\n","import { Injector, Type } from '@angular/core';\nimport { createCustomElement, NgElementStrategy, NgElementStrategyFactory } from '@angular/elements';\nimport { ElementZoneStrategy } from './element-zone-strategy';\n\nexport class ElementZoneStrategyFactory implements NgElementStrategyFactory {\n  static counter = 1;\n  private ngElement;\n\n  protected string4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  protected generateName() {\n    let result = 'dummy-name-n';\n\n    const temp = ElementZoneStrategyFactory.counter + '';\n\n    result = result + temp + '-' + this.string4() + this.string4() + this.string4() + '-' +\n      this.string4() + this.string4() + '-' + this.string4();\n\n    ElementZoneStrategyFactory.counter++;\n    return result;\n  }\n\n  constructor(private component: Type<any>, private injector: Injector) {\n    this.ngElement = createCustomElement(this.component, { injector: this.injector });\n    // this is to keep the document-register-element polyfill happy\n    // it doesn't like creating elements before the define, so we fill the registry with a random definition\n    customElements.define(this.generateName(), this.ngElement);\n  }\n\n  create(injector: Injector): NgElementStrategy {\n    // the only way to get a default strategy outside @angular/elements\n    // is to create the ngElement/ngElementImpl and get it from a property\n    let tempElement = new this.ngElement(this.injector);\n    const strategy = tempElement['ngElementStrategy'];\n    tempElement = null;\n\n    return new ElementZoneStrategy(strategy, this.injector);\n  }\n}\n"]}